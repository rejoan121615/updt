
// mixing section
@mixin resp($width) {
    @media only screen and (min-width: $width) {
        @content;
    }
}
// max responsive
@mixin mxResp($width) {
    @media only screen and (max-width: $width) {
        @content;
    }
}

// auto responsive write
$breakPointLists: 1800px, 1400px, 1200px, 992px, 768px, 576px, 425px, 0px;
@mixin respLists($propertyName, $propertyValue) {
    @for $i from 1 to 9 {
        @include resp(nth($list: $breakPointLists, $n: $i)) {
            #{$propertyName}: nth($list: $propertyValue, $n: $i);
        }
    }
}

// fluid fonts
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@mixin font-size($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
                font-size: calc(
                    #{$min-font-size} + #{strip-unit(
                            $max-font-size - $min-font-size
                        )} *
                        (
                            (100vw - #{$min-vw}) / #{strip-unit(
                                    $max-vw - $min-vw
                                )}
                        )
                );
            }
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}

// font size and line height
@mixin fsizeHeight($f, $h) {
    font-size: $f;
    line-height: $h;
}

@mixin fSmallToLarge($font-small, $font-large) {
    @include font-size($msm, $lg, $font-small, $font-large);
}
@mixin fLargeToExtraLarge($font-small, $font-large) {
    @include font-size($lg, $mxl, $font-small, $font-large);
}
// minimum to maximum media query
@mixin minMax($min, $max) {
    @media only screen and (min-width: $min) and (max-width: $max) {
        @content;
    }
}


